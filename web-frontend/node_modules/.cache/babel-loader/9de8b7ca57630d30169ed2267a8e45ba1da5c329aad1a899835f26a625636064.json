{"ast":null,"code":"var _jsxFileName = \"/Users/darshansubramaniam/Desktop/Nutrihelp/web-frontend/src/components/chtgptIMP.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n// import { Link } from 'react-router-dom';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.CHTGPT_API_KEY;\nconst systemMessage = {\n  \"role\": \"system\",\n  \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\n};\nfunction Chat2() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drg\",\n    children: [isChatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box active\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box-header\",\n        children: [\"ChatGPT \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/cht\",\n          className: \"expand\",\n          style: {\n            textDecoration: 'none'\n          },\n          children: \"Expand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box-content\",\n        children: /*#__PURE__*/_jsxDEV(MessageList, {\n          scrollBehavior: \"smooth\",\n          typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n            content: \"ChatGPT is typing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 43\n          }, this) : null,\n          children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n            model: {\n              content: message.message,\n              sender: message.sender,\n              direction: message.direction\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box-input\",\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          placeholder: \"Type message here\",\n          onSend: handleSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), !isChatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-circle\",\n      onClick: () => setIsChatOpen(true),\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat2, \"nuoJi+t5Pzx4UoInZqLV5S98DN0=\");\n_c = Chat2;\nexport default Chat2;\nvar _c;\n$RefreshReg$(_c, \"Chat2\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","Draggable","jsxDEV","_jsxDEV","API_KEY","process","env","CHTGPT_API_KEY","systemMessage","Chat2","_s","isChatOpen","setIsChatOpen","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","choices","className","children","Link","to","style","textDecoration","fileName","_jsxFileName","lineNumber","columnNumber","scrollBehavior","typingIndicator","i","model","placeholder","onSend","onClick","_c","$RefreshReg$"],"sources":["/Users/darshansubramaniam/Desktop/Nutrihelp/web-frontend/src/components/chtgptIMP.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator\n} from '@chatscope/chat-ui-kit-react';\n// import { Link } from 'react-router-dom';\nimport Draggable from 'react-draggable';\n\n\nconst API_KEY = process.env.CHTGPT_API_KEY; \nconst systemMessage = {\n  \"role\": \"system\", \n  \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\n}\n\nfunction Chat2() {\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\n      sentTime: \"just now\",\n      sender: \"ChatGPT\"\n    }\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n\n    const newMessages = [...messages, newMessage];\n    \n    setMessages(newMessages);\n\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return { role: role, content: messageObject.message }\n    });\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,\n        ...apiMessages\n      ]\n    }\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", \n    {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then((data) => {\n      return data.json();\n    }).then((data) => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n\n  return (\n    <div className=\"drg\">\n      {isChatOpen && (\n        <div className=\"chat-box active\">\n          <div className=\"chat-box-header\">ChatGPT <Link to='/cht' className='expand' style={{ textDecoration: 'none'}}>Expand</Link></div>\n          <div className=\"chat-box-content\">\n            <MessageList\n              scrollBehavior=\"smooth\"\n              typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n            >\n              {messages.map((message, i) => (\n                <Message\n                  key={i}\n                  model={{\n                    content: message.message,\n                    sender: message.sender,\n                    direction: message.direction,\n                  }}\n                />\n              ))}\n            </MessageList>\n          </div>\n          <div className=\"chat-box-input\">\n            <MessageInput placeholder=\"Type message here\" onSend={handleSend} />\n          </div>\n        </div>\n      )}\n      {!isChatOpen && (\n        <div className=\"chat-circle\" onClick={() => setIsChatOpen(true)}>\n          Chat\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Chat2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}